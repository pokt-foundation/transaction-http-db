// Code generated by mockery v2.32.3. DO NOT EDIT.

package router

import (
	context "context"

	types "github.com/pokt-foundation/transaction-http-db/types"
	mock "github.com/stretchr/testify/mock"
)

// MockDriver is an autogenerated mock type for the Driver type
type MockDriver struct {
	mock.Mock
}

// ReadRelay provides a mock function with given fields: ctx, relayID
func (_m *MockDriver) ReadRelay(ctx context.Context, relayID int) (types.Relay, error) {
	ret := _m.Called(ctx, relayID)

	var r0 types.Relay
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (types.Relay, error)); ok {
		return rf(ctx, relayID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) types.Relay); ok {
		r0 = rf(ctx, relayID)
	} else {
		r0 = ret.Get(0).(types.Relay)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, relayID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadServiceRecord provides a mock function with given fields: ctx, serviceRecordID
func (_m *MockDriver) ReadServiceRecord(ctx context.Context, serviceRecordID int) (types.ServiceRecord, error) {
	ret := _m.Called(ctx, serviceRecordID)

	var r0 types.ServiceRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (types.ServiceRecord, error)); ok {
		return rf(ctx, serviceRecordID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) types.ServiceRecord); ok {
		r0 = rf(ctx, serviceRecordID)
	} else {
		r0 = ret.Get(0).(types.ServiceRecord)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, serviceRecordID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteRegion provides a mock function with given fields: ctx, region
func (_m *MockDriver) WriteRegion(ctx context.Context, region types.PortalRegion) error {
	ret := _m.Called(ctx, region)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PortalRegion) error); ok {
		r0 = rf(ctx, region)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteRelay provides a mock function with given fields: ctx, relay
func (_m *MockDriver) WriteRelay(ctx context.Context, relay types.Relay) error {
	ret := _m.Called(ctx, relay)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.Relay) error); ok {
		r0 = rf(ctx, relay)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteServiceRecord provides a mock function with given fields: ctx, serviceRecord
func (_m *MockDriver) WriteServiceRecord(ctx context.Context, serviceRecord types.ServiceRecord) error {
	ret := _m.Called(ctx, serviceRecord)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ServiceRecord) error); ok {
		r0 = rf(ctx, serviceRecord)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WriteSession provides a mock function with given fields: ctx, session
func (_m *MockDriver) WriteSession(ctx context.Context, session types.PocketSession) error {
	ret := _m.Called(ctx, session)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PocketSession) error); ok {
		r0 = rf(ctx, session)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockDriver creates a new instance of MockDriver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDriver(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDriver {
	mock := &MockDriver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
